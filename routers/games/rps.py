from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from inline.inline import RPSKeyboard, RPSAgainKeyboard
from aiogram.types.callback_query import CallbackQuery
from settings import bot
import asyncio
import random


class RPSGame(StatesGroup):
    CHOOSING = State()
    game_timeout = None


def translate_choice(choice: str) -> str:
    if choice == "rock":
        return "–∫–∞–º–µ–Ω—å"
    elif choice == "scissors":
        return "–Ω–æ–∂–Ω–∏—Ü—ã"
    elif choice == "paper":
        return "–±—É–º–∞–≥–∞"
    else:
        return choice


async def start_rps_game(message: types.Message, state: FSMContext) -> None:
    chat_id = message.from_user.id

    current_state = await state.get_state()
    if current_state is not None:
        return

    await message.answer("–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞?", reply_markup=RPSKeyboard)
    await state.update_data(user_id=chat_id)
    await state.set_state(RPSGame.CHOOSING)

    async def game_timeout_callback():
        await state.clear()
        await message.answer("–í—Ä–µ–º—è –≤—ã—à–ª–æ, –∏–≥—Ä–∞ `–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞` –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    game_timeout = asyncio.create_task(asyncio.sleep(25))
    RPSGame.game_timeout = game_timeout
    game_timeout.add_done_callback(lambda _: asyncio.create_task(game_timeout_callback()))


async def choose_winner(call: CallbackQuery, state: FSMContext):
    chat_id = call.message.chat.id
    data = await state.get_data()
    user = data.get("user_id")

    if call.from_user.id != user:
        await call.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –Ω–∞—á–∞–ª –∏–≥—Ä—É, –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å.")
        return

    await bot.delete_message(call.message.chat.id, call.message.message_id)
    user_choice = translate_choice(call.data)
    bot_choice = random.choice(['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞'])

    if user_choice == bot_choice:
        result = "–ù–∏—á—å—è! ü§ù"
    elif (user_choice == '–∫–∞–º–µ–Ω—å' and bot_choice == '–Ω–æ–∂–Ω–∏—Ü—ã') or \
            (user_choice == '–Ω–æ–∂–Ω–∏—Ü—ã' and bot_choice == '–±—É–º–∞–≥–∞') or \
            (user_choice == '–±—É–º–∞–≥–∞' and bot_choice == '–∫–∞–º–µ–Ω—å'):
        result = "–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ"
    else:
        result = "–Ø –ø–æ–±–µ–¥–∏–ª! üòÑ"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    message = (
        f"{call.from_user.first_name} –≤—ã–±—Ä–∞–ª: {user_choice}\n"
        f"–ú–æ–π –≤—ã–±–æ—Ä: {bot_choice}\n\n"
        f"{result}"
    )
    await call.message.answer(message, reply_markup=RPSAgainKeyboard)

    await state.clear()


async def play_again_rps(call: CallbackQuery, state: FSMContext):
    chat_id = call.from_user.id

    current_state = await state.get_state()
    if current_state is not None:
        return

    await bot.delete_message(call.message.chat.id, call.message.message_id)

    await call.message.answer(
        f"{call.from_user.first_name} –≤—ã–±–∏—Ä–∞–µ—Ç:\n\n"
        "–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞?",
        reply_markup=RPSKeyboard
    )
    await state.update_data(user_id=chat_id)
    await state.set_state(RPSGame.CHOOSING)


